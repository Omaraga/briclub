<?php

namespace common\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "events".
 *
 * @property int $id
 * @property string $title
 * @property string $start_date
 * @property string $end_date
 * @property string $text
 * @property int $time
 * @property string $link
 * @property int $status
 * @property int $order
 * @property int $type_id
 * @property int $start_time
 * @property int $roleList
 * @property int $spiker_id
 */
class Events extends \yii\db\ActiveRecord
{
    public $file;
    public $spikerList;
    public $roleList;
    public $startTimeStr;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'events';
    }

    public function beforeSave($insert)
    {
        $this->start_time = strtotime($this->startTimeStr);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['text'], 'string'],
            [['time', 'status', 'order','spiker_id', 'start_time'], 'integer'],
            [['roleList', 'spikerList', 'startTimeStr'], 'safe'],
            [['title', 'link'], 'string', 'max' => 510],
            [['start_date', 'end_date'], 'string', 'max' => 255],
            [['file'], 'file', 'extensions' => ['png, jpg','JPG','PNG','PDF', 'jpeg','JPEG','pdf','doc','docx']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Название',
            'start_date' => 'Дата начала',
            'end_date' => 'Дата окончания',
            'text' => 'Описание',
            'time' => 'Time',
            'link' => 'Изображение',
            'file' => 'Изображение',
            'status' => 'Статус',
            'order' => 'Очередь',
            'slider' => 'Вывести на слайдер',
        ];
    }

    /**
     * @return array
     */
    public function getStartDate(){
        $_monthsList = array(
            "01" => "января",
            "02" => "февраля",
            "03" => "марта",
            "04" => "апреля",
            "05" => "мая",
            "06" => "июня",
            "07" => "июля",
            "08" => "августа",
            "09" => "сентября",
            "10" => "октября",
            "11" => "ноября",
            "12" => "декабря"
        );
        $day = date('d', $this->start_time);
        $month = date('m', $this->start_time);
        $monthRus = $_monthsList[$month];
        $year = date('Y', $this->start_time);
        $dayMonth = date('d.m', $this->start_time);
        $time = date('H:i', $this->start_time);
        return ['day' => $day, 'month' => $month, 'monthRus' => $monthRus, 'year' => $year, 'dayMonth' => $dayMonth, 'time' => $time];
    }

    /**
     * @return string
     */
    public function getTypeName(){
        if ($this->type_id){
            $type = EventType::findOne($this->type_id);
            if ($type){
                return $type->title;
            }else{
                return '';
            }
        }else{
            return '';
        }

    }

    /**
     * @return string
     */
    public function getImg(){
        if ($this->link){
            return $this->link;
        }else{
            return '/img/main/1.png';
        }
    }

    public static function getUserEvents(User $user){
        if ($user->rank_id > 0){
            $eventRoles = ArrayHelper::getColumn(EventsAndRoles::find()->where(['role_id' => $user->rank_id])->all(), 'event_id');
            return Events::find()->where(['id' => $eventRoles])->all();
        }else{
            return [];
        }
    }

}
